
#user  nobody;
worker_processes  4;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    
#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                  '$status $body_bytes_sent "$http_referer" '
#                  '"$http_user_agent" "$http_x_forwarded_for"';

#access_log  logs/access.log  main;

    sendfile        on;
#tcp_nopush     on;

#keepalive_timeout  0;
    keepalive_timeout  65;
    proxy_read_timeout 7200;

#gzip  on;
    client_max_body_size 4G;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    upstream download_backends {
        server 127.0.0.1:20100;
    }

    upstream upload_backends {
        server 127.0.0.1:20200;
    }

    upstream api_backends {
        server 127.0.0.1:20300;
    }

    upstream ppkefu_backends {
        server 127.0.0.1:20400;
    }
    
    upstream ppcom_backends {
        server 127.0.0.1:20500;
    }

    upstream pcsocket_backends {
        server 127.0.0.1:20600;
    }

    upstream pphome_backends {
       server 127.0.0.1:20800;
    }

    upstream ppauth_backends {
       server 127.0.0.1:20900;
    }

    upstream ppconsole_backends {
       server 127.0.0.1:21000;
    }
    
# end of backends

    server {
        listen {nginx.listen};
        server_name {nginx.server_name};

        proxy_connect_timeout 60000;
        proxy_read_timeout 60000;
        proxy_send_timeout 60000;

        client_max_body_size 4G;
        client_body_buffer_size 128k;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Remote-Host $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Server-Port $server_port;
        proxy_set_header Proxy-Host $proxy_host;
        proxy_set_header Request-Uri $request_uri;

        location / {
            rewrite ^/$ /home permanent;
        }

        location /home/ {
            proxy_pass http://pphome_backends/;
        }

        location /user/ {
            proxy_pass http://ppconsole_backends/;
        }

        location /api/ {
            proxy_pass http://api_backends/;
        }

        location /pcsocket/WS {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_pass http://pcsocket_backends/WS;
        }
        
        location /ppcom/ {
            proxy_pass http://ppcom_backends/;
        }

        location /ppkefu/ {
            proxy_pass http://ppkefu_backends/;
        }

        location /ppauth/ {
            proxy_pass http://ppauth_backends/;
        }

        location /download/ {
            proxy_pass http://download_backends;
        }

        location /identicon/ {
            proxy_pass http://download_backends;
        }

        location /upload_txt {
            proxy_pass http://ppkefu_backends/upload/;
        }

        location @upload_location {
            proxy_pass http://upload_backends;
        }
        
        location /upload {
            upload_pass   @upload_location;
            
# Store files to this directory
# The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 should exist

            upload_store {nginx.upload_store};
            upload_state_store {nginx.upload_state_store};
            
# Allow uploaded files to be read only by user
            upload_store_access user:rw group:rw all:rw;

# For CORS
            if ($request_method = OPTIONS) {
                add_header Pragma no-cache;
                add_header X-Content-Type-Options nosniff;
                
# Access control for CORS
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "cache-control, content-range, accept, origin, session-id, content-disposition, x-requested-with, content-type, content-description, referer, user-agent";
                add_header Access-Control-Allow-Credentials "true";
                
# 10 minute pre-flight approval
                add_header Access-Control-Max-Age 600;
                
                return 204;
            }

            if ($request_method = POST) {
                add_header Pragma no-cache;
                add_header X-Content-Type-Options nosniff;
#add_header Cache-control "no-story, no-cache, must-revalidate";
                
# Access control for CORS
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "cache-control, content-range, accept, origin, session-id, content-disposition, x-requested-with, content-type, content-description, referer, user-agent";
                add_header Access-Control-Allow-Credentials "true";
                
# 10 minute pre-flight approval
                add_header Access-Control-Max-Age 600;
                
# Set specified fields in request body
# This puts the original filename, new path+filename and content type
# in the requests params
                upload_set_form_field $upload_field_name.name "$upload_file_name";
                upload_set_form_field $upload_field_name.content_type "$upload_content_type";
                upload_set_form_field $upload_field_name.path "$upload_tmp_path";

# Inform backend about hash and size of a file
                upload_aggregate_form_field "$upload_field_name.md5" "$upload_file_md5";
                upload_aggregate_form_field "$upload_field_name.size" "$upload_file_size";
                upload_pass_form_field "^user_uuid$|^material_type$|^submit$|^description$|^X-Progress-ID$|^authenticity_token$";
                upload_cleanup 400 404 499 500-505;
            }
        }
    }
}
